OSAGO Aggregator

1. Осаго аггрегатор (ОА) взаимодействует с core-app (CA) на основе событий. Шина обмена - КАФКА:
- в топик REQ CA пишет json-ы заявок на ОСАГО
- из REG OA вычитывает заявки и сохраняет их в локальную БД OSAGO-DB
- в топик RESP OA пишет json-ы предложений СК на ОСАГО
- из RESP CA вычитывает предложения и обрабатывает их

2. Обмен заявками является асинхронным, т. к. в пик нагрузки поступает объем заявок, которые не смогут принять API СК. Шина КАФКА позволит распределить нагрузку по времени. 

3. Заявки перед отправкой в API СК сохраняются в локальную БД, т. к.:
- из КАФКИ эффективно читать пачками
- чтение из КАФКИ необходимо коммитить в течение ограниченного времени
- передавать из КАФКИ сразу в API СК может не позволить пропорция между таймаутом API СК и таймаутом коммита в КАФКУ
- обращение к API СК может не быть разрешено пачками и из-за этого быть медленным
- разные аварии, сбои обновлений могут приводить к потере пачек по дороге

4. Отправка заявок:
- OA читает пачку заявок
- сохраняет пачку в БД
- коммитит пачку в КАФКА
- отдает новую пачку на обработку в отдельный тред-пул
- отдельный тред-пул: 
- - общается с API СК
- - помечает статусом в БД успехи обмена
- - повторяет в API СК сбои обмена

5. Получение предложений от СК:
- OA запросил предложения
- OA записал предложения в БД
- OA сопоставил в бд предложения заявкам
- записал в КАФКУ новые предложения
- CA вычита предложения
- CA сохранил предложения в CORE БД
- CA закоммитил пачку в КАФКА

4. Преимущества
- снижены потери сообщений между API СК и КАФКА
- обмен с КАФКА поддерживается в виде пачек
- мониторинг очереди КАФКА позволяет определить сбои в OA, CA, API СК
- сбор статусов заявок в БД позволяет вести мониторинг неотправленных заявок и определять сбои в API СК
- поддержан механизм переобработки за счет хранения данных в БД
- возможно обработка топиков КАФКИ более чем одним подом
- в случае если в результате эксплуатации будет установлена избыточность хранения предложений в OSAGO БД, сохранение можно отключить и писать в КАФКУ сразу ответ API СК
- исторические данные можно очищать из БД
